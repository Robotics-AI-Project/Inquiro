// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum AgentEnum {
  CHATBOT
  USER

  @@map("agent_enum")
}

enum ClarificationEnum {
  MANUAL
  OPTION

  @@map("clarification_enum")
}

enum MessageEnum {
  TEXT
  SQL

  @@map("message_enum")
}

model Dashboard {
  id        String      @id @default(uuid())
  name      String
  userId    String      @map("user_id")
  parentId  String?     @map("parent_id")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  children  Dashboard[] @relation("ParentChild")
  parent    Dashboard?  @relation("ParentChild", fields: [parentId], references: [id])
  content   Json?

  @@map("dashboard")
}

model Snippet {
  id        String   @id @default(uuid())
  name      String
  userId    String   @map("user_id")
  sql       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("snippet")
}

model PromptClarification {
  id                String            @id @default(uuid())
  messageId         String?           @unique @map("message_id")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  clarificationType ClarificationEnum @map("clarification_type")
  options           Json?
  Message           Message?

  @@map("prompt_clarification")
}

model Chat {
  id        String    @id @default(uuid())
  name      String
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  Message   Message[]

  @@index([userId])
  @@map("chat")
}

model Message {
  id                  String               @id @default(uuid())
  content             String
  agent               AgentEnum
  chatId              String               @map("chat_id")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  chat                Chat                 @relation(fields: [chatId], references: [id], onDelete: Cascade)
  messageType         MessageEnum          @default(TEXT) @map("message_type")
  clarificationId     String?              @unique @map("clarification_id")
  promptClarification PromptClarification? @relation(fields: [clarificationId], references: [id])

  @@index([chatId])
  @@map("message")
}
